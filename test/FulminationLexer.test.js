import { describe, expect, test, } from '@jest/globals';
import HighLight from '~/class/HighLight';
import FulminationLexer from '~/class/FulminationLexer';

describe('[class] Fulmination Lexer;', () => {
  test('FulminationLexer parsing of composite types should be correct.', () => {
    const highLight = new HighLight();
    highLight.addLexer(FulminationLexer);
    expect(JSON.stringify(highLight.parse(`
      (+) bold; red; underline: demo text1 (+) bold; green; underline: demo text2 &
      (+) dim: demo text3

      [+] bold; gray; underline; dim:
        | This is example text is explain ctf,
        | """+"" that is mean add a new text or passage.
        | bold, red and so on is text or passage formate.
    `))).toMatch('[{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"red\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"underline\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"demo\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"text1\"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"green\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"underline\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"demo\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"text2\"},{\"type\":\" \"},{\"type\":\"and\",\"elem\":\"&\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"dim\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"demo\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"text3\"},{\"type\":\"\\n\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"squareParenthese\",\"elem\":\"[\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"squareParenthese\",\"elem\":\"]\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"gray\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"underline\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"dim\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"line\",\"elem\":\"|\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"This\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"is\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"example\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"text\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"is\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"explain\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"ctf,\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"line\",\"elem\":\"|\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\"escape\",\"elem\":\"\\\"+\"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"that\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"is\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"mean\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"add\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"a\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"new\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"text\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"or\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"passage.\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"line\",\"elem\":\"|\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"bold,\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"red\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"and\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"so\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"on\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"is\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"text\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"or\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"passage\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"formate.\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"}]');
  });

  test('Fulmination Lexer parsing spaces should be correct.', () => {
    const highLight = new HighLight();
    highLight.addLexer(FulminationLexer);
    expect(JSON.stringify(highLight.parse('(+) bold: GitHub (+) dim: * github (+) bgWhite: * is.'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"GitHub\"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"dim\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"asterisk\",\"elem\":\"*\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"github\"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bgWhite\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"asterisk\",\"elem\":\"*\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"is.\"}]');
  });

  test('Fulmination Lexer should be able to handle specials symbols.', () => {
    const highLight = new HighLight();
    highLight.addLexer(FulminationLexer);
    expect(JSON.stringify(highLight.parse('(+) green; bold: ** └─ (+) : * | (+) : *'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"green\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"asterisk\",\"elem\":\"*\"},{\"type\":\"asterisk\",\"elem\":\"*\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"└─\"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"asterisk\",\"elem\":\"*\"},{\"type\":\" \"},{\"type\":\"line\",\"elem\":\"|\"},{\"type\":\" \"},{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"asterisk\",\"elem\":\"*\"}]');
  });

  test('Fulmination Lexer should be able to handle symbol escapes.', () => {
    const highLight = new HighLight();
    highLight.addLexer(FulminationLexer);
    expect(JSON.stringify(highLight.parse(`
      [+] bold:
      | "("+") dim": underline": test escape symbols multi-line.
    `))).toMatch('[{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"squareParenthese\",\"elem\":\"[\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"squareParenthese\",\"elem\":\"]\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\"line\",\"elem\":\"|\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"(\"},{\"type\":\"escape\",\"elem\":\"\\\"+\"},{\"type\":\"escape\",\"elem\":\"\\\")\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"dim\"},{\"type\":\"escape\",\"elem\":\"\\\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"underline\"},{\"type\":\"escape\",\"elem\":\"\\\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"test\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"escape\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"symbols\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"multi-line.\"},{\"type\":\"\\n\"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"},{\"type\":\" \"}]');
    expect(JSON.stringify(highLight.parse('| style use "" as delimiter, passage use "| as delimiter.'))).toMatch('[{\"type\":\"line\",\"elem\":\"|\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"style\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"use\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"as\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"delimiter,\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"passage\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"use\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"|\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"as\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"delimiter.\"}]');
    expect(JSON.stringify(highLight.parse('(+) black; bgWhite: apply both ""black"" and ""bgWhile"" formats at the same time code.'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"black\"},{\"type\":\"semicolon\",\"elem\":\";\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bgWhite\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"apply\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"both\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\"text\",\"elem\":\"black\"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"and\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\"text\",\"elem\":\"bgWhile\"},{\"type\":\"escape\",\"elem\":\"\\\"\\\"\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"formats\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"at\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"the\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"same\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"time\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"code.\"}]')
  });

  test('Fulmination Lexer should be able to support complex transfer symbols.', () => {
    const highLight = new HighLight();
    highLight.addLexer(FulminationLexer);
    expect(JSON.stringify(highLight.parse('(+) bold: "19 (+) dim: underline: test escape single line.'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"19\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"(+)\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"dim:\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"underline:\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"test\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"escape\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"single\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"line.\"}]');
    expect(JSON.stringify(highLight.parse('(+) bold: "b (+) dim: underline:" test escape single line.'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"b\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"(+)\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"dim:\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"underline:\\\"\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"test\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"escape\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"single\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"line.\"}]');
    expect(JSON.stringify(highLight.parse('(+) bold: "b (+) dim: underline: " test escape single line.'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"b\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"(+)\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"dim:\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"underline:\"},{\"type\":\" \"},{\"type\":\"escape\",\"elem\":\"\\\"\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"test\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"escape\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"single\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"line.\"}]');
  });

  test('Fulmination Lexer should support number wrapping..', () => {
    const highLight = new HighLight();
    highLight.addLexer(FulminationLexer);
    expect(JSON.stringify(highLight.parse('(+) bold: test for line wrapping of numbers 5&'))).toMatch('[{\"type\":\"parenthese\",\"elem\":\"(\"},{\"type\":\"plus\",\"elem\":\"+\"},{\"type\":\"parenthese\",\"elem\":\")\"},{\"type\":\" \"},{\"type\":\"format\",\"elem\":\"bold\"},{\"type\":\"colon\",\"elem\":\":\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"test\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"for\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"line\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"wrapping\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"of\"},{\"type\":\" \"},{\"type\":\"text\",\"elem\":\"numbers\"},{\"type\":\" \"},{\"type\":\"and\",\"elem\":\"5&\"}]');
  });
});
